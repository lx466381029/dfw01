一、关键原则
清晰的代码编写：编写清晰、易懂的技术代码，使用有意义的变量和函数名，遵循 Python 的命名规范（例如类名使用驼峰命名法，函数和变量名使用小写字母加下划线的方式）。
利用 Pygame 特性：充分利用 Pygame 库的各种内置功能和工具，以实现游戏的各种需求，发挥其最大潜力。
可读性和可维护性优先：采用清晰的代码结构和逻辑，遵循 Python 的编码风格，使代码易于阅读和维护，方便后续的开发和调试工作。
二、Python/Pygame 基础使用
精灵（Sprite）类的运用：类似于 Unity 中的 MonoBehaviour，Pygame 中的精灵类（pygame.sprite.Sprite）可用于创建游戏中的各种对象，如玩家角色、敌人、道具等。可以将相关的属性（如位置、速度、图像等）和行为（如移动、碰撞检测、绘制等）封装在精灵类中，以实现代码的模块化和复用性。
碰撞检测机制：利用 Pygame 的碰撞检测函数（如 pygame.sprite.collide_rect、pygame.sprite.groupcollide 等）来处理游戏对象之间的碰撞交互，实现游戏的核心机制，例如玩家与敌人的碰撞、收集道具等逻辑。
输入处理：通过 pygame.event.get 函数获取用户的输入事件（如键盘按键、鼠标点击等），并根据不同的输入来控制游戏对象的行为，实现跨平台的玩家输入处理。
用户界面创建：使用 Pygame 的绘图函数（如 pygame.draw 系列函数）和字体渲染函数（pygame.font.Font 等）来创建游戏的用户界面，包括菜单、得分显示、生命值显示等元素，实现简单而有效的 UI 系统。
遵循模块化设计：将游戏的不同功能模块（如图形渲染、逻辑更新、输入处理、碰撞检测等）分别封装在独立的函数或类中，遵循组件化的设计模式，使各模块之间的职责清晰，便于维护和扩展。
三、错误处理和调试
异常处理：在可能出现错误的代码块（如文件读取、网络连接等操作，虽然 Pygame 游戏中可能较少涉及复杂的网络操作，但对于文件读取等情况）使用 try-except 语句来捕获和处理异常，防止程序崩溃，并提供友好的错误提示信息给开发者。
日志记录和调试输出：使用 Python 的内置 print 函数或者更高级的日志记录模块（如 logging 模块）在开发过程中输出调试信息，帮助定位和解决问题，例如打印游戏对象的状态、变量的值等关键信息，以便排查错误。
性能分析和优化：使用 Python 的性能分析工具（如 cProfile 模块）来识别游戏中的性能瓶颈，例如某个函数执行时间过长、频繁的内存分配等问题，并针对性地进行优化，提高游戏的运行效率。
四、依赖项
Pygame 库：确保已经正确安装了 Pygame 库，可以通过 pip install pygame 命令进行安装（在安装前请确保已经安装了 Python 解释器以及相应的开发环境）。
五、Pygame 特定指南
精灵表（Sprite Sheet）和图像资源管理：对于游戏中的图像资源，可以使用精灵表技术，将多个图像合并在一张图片上，通过 Pygame 的图像裁剪和坐标设置功能，从精灵表中提取所需的图像，以减少图像加载次数，提高性能和资源管理效率，类似于 Unity 中的图集（Atlases）概念。
动画实现：利用 Pygame 的图像切换和定时器功能（如 pygame.time.Clock），实现游戏对象的动画效果，例如角色的行走、攻击动画等，通过在每一帧更新时切换不同的图像来模拟动画的播放。
视觉效果增强：虽然 Pygame 没有像 Unity 那样内置丰富的光照和后处理效果，但可以通过一些简单的图形算法（如颜色渐变、透明度调整等）来实现基本的视觉效果增强，提升游戏的画面表现力。
游戏测试：编写专门的测试函数或类，对游戏的各个功能模块进行单元测试和集成测试，例如测试碰撞检测的准确性、游戏对象的移动逻辑是否正确等，确保游戏的稳定性和正确性。
六、性能优化
对象池技术：对于频繁创建和销毁的游戏对象（如子弹、敌人等），采用对象池的设计模式，预先创建一定数量的对象并保存在对象池中，当需要使用时从池中获取，使用完毕后归还到池中，避免频繁的对象创建和销毁操作带来的性能开销。
绘制优化：通过合理组织绘制顺序，减少不必要的绘制操作（如隐藏在其他对象后面的对象可以不绘制），以及使用 pygame.display.update 函数的局部更新参数，只更新屏幕上发生变化的区域，提高绘制效率，减少卡顿现象。
七、关键约定
遵循模块化架构：按照功能模块将游戏代码进行合理的划分和组织，使每个模块具有明确的职责和接口，便于团队协作开发和代码的复用与维护，类似于 Unity 的组件式架构理念。
性能和内存管理优先：在游戏开发的每个阶段，都要关注性能优化和内存管理，避免出现内存泄漏、资源浪费等问题，确保游戏在不同配置的设备上都能稳定流畅地运行。
保持清晰的项目结构：建立一个清晰、易懂的项目目录结构，将不同类型的文件（如源代码文件、图像资源文件、音频文件等）分别放置在相应的目录中，便于管理和查找，提高项目的可读性和可维护性。
通过遵循以上指南，你可以使用 Python 和 Pygame 构建出功能丰富、性能良好且易于维护的游戏，摆脱对 Unity 引擎的依赖，充分发挥 Python 语言的灵活性和 Pygame 库的便利性。在开发过程中，可以参考 Python 和 Pygame 的官方文档，以及相关的优秀开源游戏项目代码，学习更多的编程技巧和最佳实践，不断提升自己的游戏开发能力。
八、TODO清单
将框架完成后，已完成和未完成的内容罗列清楚放在.todolist文件中，当完成一部分内容时，将.todolist文件中的内容更新，方便下次启动时直接阅读来确定下一步要做什么。
并将相应的音效资源需求放在.todolist文件中。包含文件名、文件大小、文件格式、文件用途、文件所需路径。完成后我会告诉你，你来验收并更新.todolist文件。  
九、游戏资源
支持中文和英文，并且字体使用思源黑体。使用的字体ttc文件。
美术资源需要导入到项目中，并按照.todolist文件中的需求进行命名和分类。
音乐音效资源需要导入到项目中，并按照.todolist文件中的需求进行命名和分类。
十、progress.md 文件
使用这个提示词去追踪所有的工作，这可以为AI提供进度上下文，并解决错误。
在每个完成的步骤结束时，将你的工作记录在progress.md 文档中。然后依次回答下面三个问题，不要错过任何信息。
我们实施了哪些功能？我们遇到了什么问题？我们是如何修复这些错误的。
十一、frontend-guidelines.md 文件响应结构
这个结构用于向AI提供更新，表示现在处理的任务已经完成，可以开始接下来的任务。
1、提供更新：「Header菜单已经完美居中」2、提供下一个任务：「现在我们需要一个登录和注册按钮」3、标注正确的文档：「查看文档，并解释你如何实现这些需求」
提示词：Header menu is now aligned in center perfectly.Now we need a sign in and sign up buttons.Check @frontend-guidelines.md and explain how you will implement this.
十二、process-status.md 文件
我们再次使用AI的时候，需要知道以前做过了哪些内容。因此这个文件就是帮助我们保留工作日志，并了解已经完成的工作和剩余的工作。
在回话结束的时候，将你的工作日志记录在 process-status.md 文件中。
首先，检测 process-status.md 文件，了解我们这次对话实现的所有功能。然后写一份详细的会议报告，并为下一次工作提供详细的背景信息。